# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/18_losses.ipynb (unless otherwise specified).

__all__ = ['LossCallback']

# Cell

from .imports import *
from .torch_imports import *
from .torch_core import *
from .layers import *
from .callbacks import *
from .policy_gradient import *

# Cell

class LossCallback(Callback):
    def __init__(self, loss_function, name, weight=1., track=True, order=20):
        super().__init__(name=name, order=order)
        self.loss_function = loss_function
        self.weight = weight
        self.track = track

    def setup(self):
        if self.track:
            log = self.environment.log
            log.add_metric(self.name)
            log.add_log(self.name)

    def compute_loss(self):
        loss, loss_dict = self.loss_function.from_batch_state(self.batch_state)

        if self.track:
            self.environment.log.update_metric(self.name, loss.mean().detach().cpu().numpy())

        loss = loss * self.weight
        self.environment.batch_state.loss += loss.mean()
        self.environment.batch_state[self.name] = loss.detach().cpu().numpy()