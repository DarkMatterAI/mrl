# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/08_dataloaders.ipynb (unless otherwise specified).

__all__ = ['batch_sequences', 'lm_collate', 'vector_collate', 'vec_to_text_collate', 'BaseDataset', 'TextDataset',
           'Vector_Dataset', 'Vec_To_Text_Dataset']

# Cell
from .imports import *
from .torch_imports import *
from .torch_core import *
from .vocab import *

# Cell

def batch_sequences(sequences, pad_idx):
    'Packs `sequences` into a dense tensor, using `pad_idx` for padding'
    max_len = max([len(i) for i in sequences])+1
    bs = len(sequences)

    batch_tensor = torch.zeros((bs, max_len)).long() + pad_idx

    for i,item in enumerate(sequences):
        batch_tensor[i,:item.shape[0]] = item

    return batch_tensor


def lm_collate(batch, pad_idx, batch_first=True):
    '''
    Collate function for language models. Returns packed
    batch for next-token prediction
    '''

    x_tensor = batch_sequences([i[0] for i in batch], pad_idx)

    if isinstance(batch[0][1], torch.Tensor):
        y_tensor = batch_sequences([i[1] for i in batch], pad_idx)
    else:
        y_tensor = x_tensor

    if batch_first:
        output = (x_tensor[:,:-1], y_tensor[:,1:])
    else:
        x_tensor = x_tensor.T
        y_tensor = y_tensor.T
        output = (x_tensor[:-1,:], y_tensor[1:,:])

    return output


# Cell

def vector_collate(batch):
    '''
    Collate function for vectors
    '''
    fps = torch.stack(batch)
    return fps

def vec_to_text_collate(batch, pad_idx, batch_first=True):
    '''
    Collate function for predicting a sequence from an input vector where
    `batch_tensor` is needed for input (ie predict SMILES from properties)
    '''
    fps = torch.stack([i[0] for i in batch])
    batch_tensor = batch_sequences([i[1] for i in batch], pad_idx)

    if batch_first:
        output = ((batch_tensor[:,:-1], fps), batch_tensor[:,1:])
    else:
        batch_tensor = batch_tensor.T
        output = ((batch_tensor[:-1,:], fps), batch_tensor[1:,:])

    return output

# Cell

class BaseDataset(Dataset):
    '''
    BaseDataset - base dataset

    Inputs:

        `collate_function` - batch collate function for the particular dataset class
    '''
    def __init__(self, collate_function):
        self.collate_function = collate_function

    def dataloader(self, bs, num_workers=-1, **dl_kwargs):
        if num_workers==-1:
            if 'ncpus' in os.environ.keys():
                num_workers = int(os.environ['ncpus'])
            else:
                num_workers=os.cpu_count()

        return DataLoader(self, batch_size=bs, num_workers=num_workers,
                          collate_fn=self.collate_function, **dl_kwargs)

    def new(self):
        raise NotImplementedError

    def split(self, percent_valid, seed=0):

        torch.manual_seed(seed)
        idxs = torch.randperm(self.__len__()).numpy()
        train_length = int(self.__len__()*(1-percent_valid))

        train_idxs = idxs[:train_length]
        valid_idxs = idxs[train_length:]

        return self.split_on_idxs(train_idxs, valid_idxs)

    def split_on_idxs(self, train_idxs, valid_idxs):
        raise NotImplementedError

# Cell

class TextDataset(BaseDataset):
    '''
    TextDataset - base dataset for language modes

    Inputs:

        `sequences` - list[str], list[tuple], list of text sequences or text tuples (source, target)

        `vocab` - Vocab, vocabuary for tokenization/numericaization

        `collate_function` - batch collate function. If None, defauts to `lm_collate`
    '''
    def __init__(self, sequences, vocab, collate_function=None):
        self.sequences = sequences
        self.vocab = vocab
        if collate_function is None:
            collate_function = partial(lm_collate, pad_idx=self.vocab.stoi['pad'])

        super().__init__(collate_function)

    def __len__(self):
        return len(self.sequences)

    def numericalize(self, sequence):
        tokens = self.vocab.tokenize(sequence)
        ints = self.vocab.numericalize(tokens)
        ints = torch.LongTensor(ints)
        return ints

    def __getitem__(self, idx):
        sequence = self.sequences[idx]

        if type(sequence)==tuple:
            outputs = (self.numericalize(sequence[0]),
                       self.numericalize(sequence[1]))
        else:
            outputs = (self.numericalize(sequence), None)

        return outputs

    def new(self, sequences):
        return self.__class__(sequences, self.vocab, self.collate_function)

    def split_on_idxs(self, train_idxs, valid_idxs):

        train_ds = self.new([self.sequences[i] for i in train_idxs])
        valid_ds = self.new([self.sequences[i] for i in valid_idxs])
        return (train_ds, valid_ds)


# Cell

class Vector_Dataset(BaseDataset):
    '''
    Vector_Dataset - base dataset for molecule-derived vectors

    Inputs:

        `sequences` - list[str], list of text sequences

        `vec_function` - function to convert sequence to a vector

        `collate_function` - batch collate function. If None, defauts to `vector_collate`
    '''
    def __init__(self, sequences, vec_function, collate_function=None):
        if collate_function is None:
            collate_function = vector_collate
        super().__init__(collate_function)

        self.sequences = sequences
        self.vec_function = vec_function

    def __len__(self):
        return len(self.sequences)

    def __getitem__(self, idx):
        sequence = self.sequences[idx]
        vec = self.vec_function(sequence)
        vec = torch.FloatTensor(vec)
        return vec

    def new(self, sequences):
        return self.__class__(sequences, self.vec_function, self.collate_function)

    def split_on_idxs(self, train_idxs, valid_idxs):

        train_ds = self.new([self.sequences[i] for i in train_idxs])
        valid_ds = self.new([self.sequences[i] for i in valid_idxs])

        return (train_ds, valid_ds)


# Cell

class Vec_To_Text_Dataset(Vector_Dataset):
    '''
    Vec_To_Text_Dataset - base dataset for predicting text sequences from vectors

    Inputs:

        `sequences` - list[str], list[tuple], list of text sequences or text tuples (source, target)

        `vocab` - Vocab, vocabuary for tokenization/numericaization

        `vec_function` - function to convert smiles to fingerprints

        `collate_function` - batch collate function. If None, defauts to `vec_to_text_collate`
    '''
    def __init__(self, sequences, vocab, vec_function, collate_function=None):

        if collate_function is None:
            collate_function = partial(vec_to_text_collate, pad_idx=vocab.stoi['pad'])

        super().__init__(sequences, vec_function, collate_function)
        self.vocab = vocab

    def __getitem__(self, idx):
        sequence = self.sequences[idx]

        if type(sequence)==tuple:
            source_sequence = sequence[0]
            target_sequence = sequence[1]
        else:
            source_sequence = sequence
            target_sequence = sequence

        vec = self.vec_function(source_sequence)
        vec = torch.FloatTensor(vec)

        tokens = self.vocab.tokenize(target_sequence)
        ints = self.vocab.numericalize(tokens)
        ints = torch.LongTensor(ints)

        return (vec, ints)

    def new(self, sequences):
        return self.__class__(sequences, self.vocab, self.vec_function, self.collate_function)

    def split_on_idxs(self, train_idxs, valid_idxs):

        train_ds = self.new([self.sequences[i] for i in train_idxs])
        valid_ds = self.new([self.sequences[i] for i in valid_idxs])

        return (train_ds, valid_ds)
