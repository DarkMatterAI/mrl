# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/03_templates.ipynb (unless otherwise specified).

__all__ = ['PropertyFunction', 'RangeProperty']

# Cell
# hide
from .imports import *
from .core import *
from .chem import *

# Cell

class PropertyFunction():
    def __init__(self, property_function):
        self.property_function = property_function

    def __call__(self, mol):
        prop = self.calc_property(mol)
        prop_bool = self.criteria(prop)
        return prop_bool

    def calc_property(self, mol):
        return self.property_function(mol)

    def criteria(self, prop):
        pass


class RangeProperty(PropertyFunction):
    def __init__(self, property_function, min_val=None, max_val=None):
        super().__init__(property_function)
        self.min_val = min_val
        self.max_val = max_val
        assert (self.min_val is not None) or (self.max_val is not None), "One bound must be specified"

    def criteria(self, prop):
        lower_bound = (property_output>=self.min_val) if self.min_val is not None else True
        upper_bound = (property_output<=self.max_val) if self.max_val is not None else True
        output = lower_bound and upper_bound

        return output